services:
  # Service principal de l'application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_legal_assistant
    restart: unless-stopped
    ports:
      - "8009:8009"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      - postgres
      - qdrant
      - redis
    # Utiliser network_mode: host permet d'accéder à localhost directement
    # Seulement sur Linux, sur Mac ce sera l'IP du docker host
    networks:
      - legal-assistant-network
    environment:
      - VECTOR_DB_TYPE=qdrant
      - QDRANT_URL=http://qdrant:6339
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: legal_assistant_frontend
    restart: unless-stopped
    ports:
      - "3009:3009"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - app
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://app:8009
    command: npm run client
    networks:
      - legal-assistant-network

  # Base de données PostgreSQL
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: legal_assistant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-law_assistant}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5439:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - legal-assistant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de données vectorielle Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: legal_assistant_qdrant
    restart: unless-stopped
    ports:
      - "6339:6333"
      - "6340:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/config.yaml:/qdrant/config/config.yaml
    networks:
      - legal-assistant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6339/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Redis pour la mise en cache et les tâches asynchrones
  redis:
    image: redis:alpine
    container_name: legal_assistant_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6389:6389"
    volumes:
      - redis_data:/data
    networks:
      - legal-assistant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Adminer pour la gestion de la base de données
  adminer:
    image: adminer
    container_name: legal_assistant_adminer
    restart: unless-stopped
    ports:
      - "8099:8080"
    environment:
      # Utiliser le nom du service PostgreSQL dans le réseau Docker
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: flat
    depends_on:
      - postgres
    networks:
      - legal-assistant-network

  # Service pour les traitements ETL avec Prefect au lieu d'Airflow
  etl:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legal_assistant_etl
    restart: unless-stopped
    command: python -m app.admin.data_admin
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      - postgres
      - qdrant
      - redis
    networks:
      - legal-assistant-network

volumes:
  postgres_data:
  qdrant_data:
  redis_data:

networks:
  legal-assistant-network:
    driver: bridge 