# version: '3.8'

services:
  # Service principal de l'application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_legal_assistant
    restart: unless-stopped
    ports:
      - "8009:8009"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      - postgres
      - qdrant
      - redis
    networks:
      - legal-assistant-network

  # Frontend React (si séparé)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: legal_assistant_frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #   env_file:
  #     - .env
  #   networks:
  #     - legal-assistant-network

  # Base de données PostgreSQL
  postgres:
    image: ankane/pgvector:latest
    container_name: legal_assistant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-law_assistant}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - legal-assistant-network

  # Base de données vectorielle Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: legal_assistant_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - legal-assistant-network

  # Alternative: Weaviate pour la base vectorielle
  # weaviate:
  #   image: semitechnologies/weaviate:latest
  #   container_name: legal_assistant_weaviate
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     QUERY_DEFAULTS_LIMIT: 25
  #     AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
  #     PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
  #     DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
  #     ENABLE_MODULES: 'text2vec-transformers'
  #     TRANSFORMERS_INFERENCE_API: http://t2v-transformers:8080
  #   volumes:
  #     - weaviate_data:/var/lib/weaviate
  #   networks:
  #     - legal-assistant-network
  #   depends_on:
  #     - t2v-transformers

  # Service de vecteurs pour Weaviate
  # t2v-transformers:
  #   image: semitechnologies/transformers-inference:sentence-transformers-paraphrase-multilingual-mpnet-base-v2
  #   container_name: legal_assistant_transformers
  #   restart: unless-stopped
  #   environment:
  #     ENABLE_CUDA: '0'
  #   networks:
  #     - legal-assistant-network

  # Redis pour la mise en cache et les tâches asynchrones
  redis:
    image: redis:alpine
    container_name: legal_assistant_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - legal-assistant-network

  # Adminer pour la gestion de la base de données
  adminer:
    image: adminer
    container_name: legal_assistant_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - legal-assistant-network

  # Service pour les traitements ETL et enrichissement des données (optionnel)
  etl:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legal_assistant_etl
    restart: unless-stopped
    command: python -m app.admin.data_admin
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      - postgres
      - qdrant
      - redis
    networks:
      - legal-assistant-network

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  # weaviate_data:

networks:
  legal-assistant-network:
    driver: bridge 