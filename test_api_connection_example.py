#!/usr/bin/env python3
"""
Script de d√©monstration pour l'utilisation des APIs Judilibre et L√©gifrance
avec des connexions directes (sans d√©pendances suppl√©mentaires)

Ce script montre comment utiliser les APIs Judilibre et L√©gifrance avec les
informations d'authentification fournies dans les exemples curl.
"""

import os
import requests
import json
import asyncio
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration de l'API Judilibre
JUDILIBRE_KEY_ID = os.getenv("JUDILIBRE_KEY_ID", "8687ddca-33a7-47d3-a5b7-970b71a6af92")
JUDILIBRE_TOKEN = os.getenv("JUDILIBRE_TOKEN", "WnU2HnkvuiQkmt0A9mxcFdcUmf6aIJwWOH9VKd4A3lP8yxFizji8D7")
JUDILIBRE_SANDBOX_URL = os.getenv("JUDILIBRE_SANDBOX_URL", "https://sandbox-api.piste.gouv.fr/cassation/judilibre/v1.0")

# Configuration de l'API L√©gifrance
LEGIFRANCE_TOKEN = os.getenv("LEGIFRANCE_TOKEN", "LHSkc7y94kZsgEr5xpoKwDRAPudaDUzMovCCuU6fmbYaZ5X4hbRTQX")
LEGIFRANCE_SANDBOX_URL = os.getenv("LEGIFRANCE_SANDBOX_URL", "https://sandbox-api.piste.gouv.fr/dila/legifrance/lf-engine-app")

async def test_judilibre():
    """Tester l'API Judilibre avec l'export d'un lot"""
    print("\n=== TEST DE L'API JUDILIBRE ===")
    
    # Exemple curl fourni:
    # curl -is -H "accept: application/json" -H "KeyId: 8687ddca-33a7-47d3-a5b7-970b71a6af92" 
    # -H "Authorization: Bearer WnU2HnkvuiQkmt0A9mxcFdcUmf6aIJwWOH9VKd4A3lP8yxFizji8D7" 
    # -X GET "https://sandbox-api.piste.gouv.fr/cassation/judilibre/v1.0/export?location=string&batch=11"
    
    # On reproduit la m√™me requ√™te:
    try:
        endpoint = f"{JUDILIBRE_SANDBOX_URL}/export"
        
        headers = {
            "KeyId": JUDILIBRE_KEY_ID,
            "Authorization": f"Bearer {JUDILIBRE_TOKEN}",
            "accept": "application/json"
        }
        
        params = {
            "location": "string",
            "batch": 11
        }
        
        print("Appel de l'API Judilibre (endpoint /export)...")
        response = requests.get(endpoint, headers=headers, params=params)
        response.raise_for_status()
        
        result = response.json()
        
        # Afficher les r√©sultats
        decisions_count = len(result.get("decisions", []))
        print(f"‚úÖ Succ√®s! {decisions_count} d√©cisions obtenues")
        
        # Afficher quelques d√©tails de la premi√®re d√©cision (s'il y en a)
        if decisions_count > 0:
            first_decision = result["decisions"][0]
            print("\nPremi√®re d√©cision:")
            print(f"- ID: {first_decision.get('id', 'N/A')}")
            print(f"- Juridiction: {first_decision.get('jurisdiction', 'N/A')}")
            print(f"- Chambre: {first_decision.get('chamber', 'N/A')}")
            print(f"- Num√©ro: {first_decision.get('number', 'N/A')}")
            print(f"- Date: {first_decision.get('decision_date', 'N/A')}")
            print(f"- Solution: {first_decision.get('solution', 'N/A')}")
            
            # Sauvegarder le r√©sultat complet dans un fichier JSON
            with open("judilibre_export_result.json", "w", encoding="utf-8") as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
                print("\nR√©sultat complet sauvegard√© dans 'judilibre_export_result.json'")
        
        # Recherche simple
        search_endpoint = f"{JUDILIBRE_SANDBOX_URL}/search"
        
        search_params = {
            "query": "propri√©t√©",
            "date_start": "2020-01-01",
            "date_end": "2023-12-31",
            "page_size": 5
        }
        
        print("\nRecherche dans Judilibre...")
        search_response = requests.get(search_endpoint, headers=headers, params=search_params)
        search_response.raise_for_status()
        
        search_result = search_response.json()
        search_count = search_result.get("total", 0)
        print(f"‚úÖ Recherche r√©ussie! {search_count} d√©cisions trouv√©es")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'API Judilibre: {str(e)}")
        return False

async def test_legifrance():
    """Tester l'API L√©gifrance avec la r√©cup√©ration d'une d√©lib√©ration CNIL"""
    print("\n=== TEST DE L'API L√âGIFRANCE ===")
    
    # Exemple curl fourni:
    # curl -is -H "accept: application/json" -H "Content-Type: application/json" 
    # -H "Authorization: Bearer LHSkc7y94kZsgEr5xpoKwDRAPudaDUzMovCCuU6fmbYaZ5X4hbRTQX" 
    # -d "{\"ancienId\":\"MCN97020008A\"}" 
    # -X POST "https://sandbox-api.piste.gouv.fr/dila/legifrance/lf-engine-app/consult/getCnilWithAncienId"
    
    # On reproduit la m√™me requ√™te:
    try:
        endpoint = f"{LEGIFRANCE_SANDBOX_URL}/consult/getCnilWithAncienId"
        
        headers = {
            "Authorization": f"Bearer {LEGIFRANCE_TOKEN}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        payload = {
            "ancienId": "MCN97020008A"
        }
        
        print("Appel de l'API L√©gifrance (endpoint /consult/getCnilWithAncienId)...")
        response = requests.post(endpoint, headers=headers, json=payload)
        response.raise_for_status()
        
        result = response.json()
        
        # Afficher les r√©sultats
        print(f"‚úÖ Succ√®s! D√©lib√©ration CNIL obtenue")
        print("\nD√©tails de la d√©lib√©ration:")
        print(f"- ID: {result.get('id', 'N/A')}")
        print(f"- Ancien ID: {result.get('ancienId', 'N/A')}")
        print(f"- Titre: {result.get('title', 'N/A')}")
        print(f"- Nature: {result.get('nature', 'N/A')}")
        print(f"- Num√©ro: {result.get('num', 'N/A')}")
        print(f"- Date: {result.get('date', 'N/A')}")
        
        # Sauvegarder le r√©sultat complet dans un fichier JSON
        with open("legifrance_cnil_result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
            print("\nR√©sultat complet sauvegard√© dans 'legifrance_cnil_result.json'")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'API L√©gifrance: {str(e)}")
        return False

async def main():
    """Fonction principale pour tester les deux APIs"""
    print("=== D√âMONSTRATION DES APIS JUDILIBRE ET L√âGIFRANCE ===")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("Ces tests utilisent les informations d'authentification fournies dans les exemples curl")
    
    # Tester l'API Judilibre
    judilibre_success = await test_judilibre()
    
    # Tester l'API L√©gifrance
    legifrance_success = await test_legifrance()
    
    # R√©sum√© des tests
    print("\n=== R√âSUM√â DES TESTS ===")
    print(f"API Judilibre: {'‚úÖ Succ√®s' if judilibre_success else '‚ùå √âchec'}")
    print(f"API L√©gifrance: {'‚úÖ Succ√®s' if legifrance_success else '‚ùå √âchec'}")
    print()
    
    if judilibre_success and legifrance_success:
        print("üéâ SUCC√àS! Les deux APIs sont fonctionnelles")
    elif judilibre_success or legifrance_success:
        print("‚ö†Ô∏è SUCC√àS PARTIEL: Une seule API est fonctionnelle")
    else:
        print("‚ùå √âCHEC: Aucune API n'est fonctionnelle")

if __name__ == "__main__":
    asyncio.run(main()) 